import pickle
from pathlib import Path

import pandas as pd  # pip install pandas openpyxl
import plotly.express as px  # pip install plotly-express
import streamlit as st  # pip install streamlit
import streamlit_authenticator as stauth  # pip install streamlit-authenticator


# emojis: https://www.webfx.com/tools/emoji-cheat-sheet/
st.set_page_config(page_title="Sales Dashboard", page_icon=":bar_chart:", layout="wide")


# --- USER AUTHENTICATION ---
names = ["Peter Parker", "Rebecca Miller"]
usernames = ["pparker", "rmiller"]

# load hashed passwords
file_path = Path(__file__).parent / "hashed_pw.pkl"
with file_path.open("rb") as file:
    hashed_passwords = pickle.load(file)

authenticator = stauth.Authenticate(names, usernames, hashed_passwords,
    "sales_dashboard", "abcdef", cookie_expiry_days=30)

name, authentication_status, username = authenticator.login("Login", "main")

if authentication_status == False:
    st.error("Username/password is incorrect")

if authentication_status == None:
    st.warning("Please enter your username and password")

if authentication_status:
    # ---- READ EXCEL ----
    @st.cache
    def get_data_from_excel():
        df = pd.read_excel(
            io="supermarkt_sales.xlsx",
            engine="openpyxl",
            sheet_name="Sales",
            skiprows=3,
            usecols="B:R",
            nrows=1000,
        )
        # Add 'hour' column to dataframe
        df["hour"] = pd.to_datetime(df["Time"], format="%H:%M:%S").dt.hour
        return df

    df = get_data_from_excel()

    # ---- SIDEBAR ----
    authenticator.logout("Logout", "sidebar")
    st.sidebar.title(f"Welcome {name}")
 
 
 
st.set_page_config(
    page_title="Home",
    page_icon="ðŸ˜‡",
    layout="wide"
)
'''
st.markdown('<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">', unsafe_allow_html=True)
st.markdown("""
<nav class="navbar fixed-top navbar-expand-lg navbar-dark" style="background-color: #3498DB;">
  <a class="navbar-brand" href="https://youtube.com/dataprofessor" target="_blank">Data Professor</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
  <div class="collapse navbar-collapse" id="navbarNav">
    <ul class="navbar-nav">
      <li class="nav-item active">
        <a class="nav-link disabled" href="#">Homepage <span class="sr-only">(current)</span></a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="https://youtube.com/dataprofessor" target="_blank">YouTube</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="https://twitter.com/thedataprof" target="_blank">Twitter</a>
      </li>
    </ul>
  </div>
</nav>
""", unsafe_allow_html=True)


# Use local CSS
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
        local_css("style/style.css")

        '''





import requests
import streamlit as st
from streamlit_lottie import st_lottie
from PIL import Image


# Find more emojis here: https://www.webfx.com/tools/emoji-cheat-sheet/
st.set_page_config(page_title="My Webpage", page_icon=":tada:", layout="wide")


def load_lottieurl(url):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()


# Use local CSS
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


local_css("style/style.css")

# ---- LOAD ASSETS ----
lottie_coding = load_lottieurl("https://assets5.lottiefiles.com/packages/lf20_fcfjwiyb.json")
img_contact_form = Image.open("images/yt_contact_form.png")
img_lottie_animation = Image.open("images/yt_lottie_animation.png")

# ---- HEADER SECTION ----
with st.container():
    st.subheader("Hi, I am Sven :wave:")
    st.title("A Data Analyst From Germany")
    st.write(
        "I am passionate about finding ways to use Python and VBA to be more efficient and effective in business settings."
    )
    st.write("[Learn More >](https://pythonandvba.com)")

# ---- WHAT I DO ----
with st.container():
    st.write("---")
    left_column, right_column = st.columns(2)
    with left_column:
        st.header("What I do")
        st.write("##")
        st.write(
            """
            On my YouTube channel I am creating tutorials for people who:
            - are looking for a way to leverage the power of Python in their day-to-day work.
            - are struggling with repetitive tasks in Excel and are looking for a way to use Python and VBA.
            - want to learn Data Analysis & Data Science to perform meaningful and impactful analyses.
            - are working with Excel and found themselves thinking - "there has to be a better way."

            If this sounds interesting to you, consider subscribing and turning on the notifications, so you donâ€™t miss any content.
            """
        )
        st.write("[YouTube Channel >](https://youtube.com/c/CodingIsFun)")
    with right_column:
        st_lottie(lottie_coding, height=300, key="coding")

# ---- PROJECTS ----
with st.container():
    st.write("---")
    st.header("My Projects")
    st.write("##")
    image_column, text_column = st.columns((1, 2))
    with image_column:
        st.image(img_lottie_animation)
    with text_column:
        st.subheader("Integrate Lottie Animations Inside Your Streamlit App")
        st.write(
            """
            Learn how to use Lottie Files in Streamlit!
            Animations make our web app more engaging and fun, and Lottie Files are the easiest way to do it!
            In this tutorial, I'll show you exactly how to do it
            """
        )
        st.markdown("[Watch Video...](https://youtu.be/TXSOitGoINE)")
with st.container():
    image_column, text_column = st.columns((1, 2))
    with image_column:
        st.image(img_contact_form)
    with text_column:
        st.subheader("How To Add A Contact Form To Your Streamlit App")
        st.write(
            """
            Want to add a contact form to your Streamlit website?
            In this video, I'm going to show you how to implement a contact form in your Streamlit app using the free service â€˜Form Submitâ€™.
            """
        )
        st.markdown("[Watch Video...](https://youtu.be/FOULV9Xij_8)")

# ---- CONTACT ----
with st.container():
    st.write("---")
    st.header("Get In Touch With Me!")
    st.write("##")

    # Documention: https://formsubmit.co/ !!! CHANGE EMAIL ADDRESS !!!
    contact_form = """
    <form action="https://formsubmit.co/YOUR@MAIL.COM" method="POST">
        <input type="hidden" name="_captcha" value="false">
        <input type="text" name="name" placeholder="Your name" required>
        <input type="email" name="email" placeholder="Your email" required>
        <textarea name="message" placeholder="Your message here" required></textarea>
        <button type="submit">Send</button>
    </form>
    """
    left_column, right_column = st.columns(2)
    with left_column:
        st.markdown(contact_form, unsafe_allow_html=True)
    with right_column:
        st.empty()


# @st.cache_resource
# def init_connection():
#     return psycopg2.connect(**st.secrets["postgres"])

# conn = init_connection()

 
 

# # Uses st.cache_data to only rerun when the query changes or after 10 min.
# @st.cache_data(ttl=600)
# def run_query(query):
#     with conn.cursor() as cur:
#         cur.execute(query)
#         return cur.fetchall()

# rows = run_query("select request_by, song_name, artist_name from f_song_request();")
# data = pd.DataFrame(rows)

# if len(data.columns) == 0:
#     st.write("Currently No Song Request")
# else:
#     data.columns = ['request_by', 'song_name', 'artist_name']
#     st.table(data)

# my_email_address = st.text_input("Email Address*", "") # Email
# my_first_name = st.text_input("First Name", "") # First
# my_song = st.text_input("Song Name*", "") # Song
# my_artist = st.text_input("Artist Name*", "") # Artist

 


    # else:
    #     st.error("Please fill in all required fields.")



# import streamlit as st  
# import io
# from PIL import Image
# import base64
# import pandas as pd
# from st_aggrid import AgGrid, GridOptionsBuilder
# import psycopg2

# ################################################## SET PAGE ############################################################################  
# st.set_page_config(
#     page_title="Song Requests",
#     page_icon="pages/images/TCN logo black.jpg",
#     layout="wide",
#     initial_sidebar_state="collapsed",
#     menu_items={
#         'About': "# Make your dream a reality!"
#     }
# )

# # Use local CSS
# with open("pages/style/style.css") as source_style:
#     st.markdown(f"<style>{source_style.read()}</style>", unsafe_allow_html=True)

# st.image("pages/images/song_request.png", width=1750)  

# # Inject CSS for background color
# page_bg_img = """
# <style>
# [data-testid="stAppViewContainer"] {
#     background-color: #f1ecec;
# }
# </style>
# """
# st.markdown(page_bg_img, unsafe_allow_html=True)

# # Load the images
# youtube_img = base64.b64encode(open("pages/images/youtube.png", "rb").read()).decode()
# instagram_img = base64.b64encode(open("pages/images/instagram.png", "rb").read()).decode()

# # Create columns in the sidebar with less spacing
# col1, col2, col3, col4, col5, col6 = st.sidebar.columns([1, 1, 1, 1, 1, 1])

# with col1:
#     st.markdown(
#         f"""<a href="https://www.youtube.com/@djtayzer">
#         <img src="data:image/png;base64,{youtube_img}" width="30">
#         </a>""",
#         unsafe_allow_html=True,
#     )

# with col2:
#     st.markdown(
#         f"""<a href="https://www.instagram.com/tayzer/">
#         <img src="data:image/png;base64,{instagram_img}" width="30">
#         </a>""",
#         unsafe_allow_html=True
#     )

# ################################################## Email Form ############################################################################    
# # Uses st.cache_resource to only run once.
# @st.cache_resource
# def init_connection():
#     return psycopg2.connect(**st.secrets["postgres"])

# conn = init_connection()

# # Function to execute the query
# def execute_function(email, song, artist, first_name):
#     with conn.cursor() as cur:
#         cur.callproc('sp_song_request', [email, song, artist, first_name])
#         return cur.fetchall()
# # Uses st.cache_data to only rerun when the query changes or after 10 min.
# @st.cache_data(ttl=600)
# def run_query(query):
#     with conn.cursor() as cur:
#         cur.execute(query)
#         return cur.fetchall()
# # Function to check if all required fields are filled
# def check_required_fields(fields):
#     for field in fields:
#         if not field:
#             return False
#     return True

# my_email_address = st.text_input("Email Address*", "") # Email
# my_first_name = st.text_input("First Name", "") # First
# my_song = st.text_input("Song Name*", "") # Song
# my_artist = st.text_input("Artist Name*", "") # Artist
# # Submit button
# if st.button("Submit"):
#     # Input fields

#         # Check if all required fields are filled
#     if check_required_fields([my_email_address, my_song, my_artist]):
#         st.success("Form submitted successfully!")
#         execute_function(my_email_address, my_song, my_artist, my_first_name)

#     else:
#         st.error("Please fill in all required fields.")


# rows = run_query("select request_by, song_name, artist_name from f_song_request();")
# data = pd.DataFrame(rows)
# if len(data.columns) == 0:
#     st.write("Currently No Song Request")
# else:
#     data.columns = ['request_by', 'song_name', 'artist_name']
#     st.table(data)



rows = run_query("select first_name, last_name  from professional;")
#rows = run_query("select request_by from f_song_request();")
 
data=pd.DataFrame(rows)
if len(data.columns) == 0:
    st.write("Product not available")
else:
    #data.columns=['request_by']
    data.columns=['first_name', 'last_name']
    st.table(data)










#<div id="gigsalad-reviews-widget"></div><script>var gsReviewWidget;(function(d,t){var s=d.createElement(t),options={path:'254761',maxWidth:600,count:4};s.src='https://www.gigsalad.com/js/gigsalad-reviews-widget.min.js';s.onload=s.onreadystatechange=function(){var rs=this.readyState;if(rs)if(rs!='complete')if(rs!='loaded')return;try{gsReviewWidget=new GsReviewsWidget(options);gsReviewWidget.display();}catch(e){}};var scr=d.getElementsByTagName(t)[0];var par=scr.parentNode;par.insertBefore(s,scr);})(document,'script');</script>


#st.image("pages/images/company_logo.png", width=200)
 
#Logo
# file = open("pages/images/", "rb")
# contents = file.read()
# img_str = base64.b64encode(contents).decode("utf-8")
# buffer = io.BytesIO()
# file.close()
# img_data = base64.b64decode(img_str)
# img = Image.open(io.BytesIO(img_data))
# resized_img = img.resize((250, 44))  # x, y
# resized_img.save(buffer, format="PNG")
# img_b64 = base64.b64encode(buffer.getvalue()).decode("utf-8")
# st.markdown(
#         f"""
#         <style>
#             [data-testid="stSidebarNav"] {{
#                 background-image: url('data:image/png;base64,{img_b64}');
#                 background-repeat: no-repeat;
#                 padding-top: 0px;
#                 margin-left: auto;
#                 margin-right: auto;
#             }}
#         </style>
#         """,
#         unsafe_allow_html=True,
#     )

 
# Use local CSS

# social_media_links = [
#     "https://www.youtube.com/@DJTayzer",
#     "https://www.instagram.com/Tayzer",
# ]
# st.markdown("<h1 style='text-align: center; color: green;'>Get In Touch With Me!</h1>", unsafe_allow_html=True)
# st.markdown("<h3 style='text-align: center; color: green;'>Cell: (714) 260-5003</h3>", unsafe_allow_html=True)
# social_media_icons = SocialMediaIcons(social_media_links)
# social_media_icons.render()

 